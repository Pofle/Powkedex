services:
  # Set web service
  powkedex:
    container_name: powkedex  
    build: # Build a docker image from context with associated dockerfile
      context: ./app
      dockerfile: dev.Dockerfile

    environment: # Set environment variables
      CHOKIDAR_USEPOLLING: "true"   # Activates Hot reload
      ENV_VARIABLE: ${ENV_VARIABLE}
      NEXT_PUBLIC_ENV_VARIABLE: ${NEXT_PUBLIC_ENV_VARIABLE}
      DATABASE_URL: "postgresql://admin:poke@postgres:5432/pokedex?schema=public" #Set the DB url   
    env_file: # Set environment variables based on the .env file
      - .env 
    volumes:
       - ./app/src:/app/src
       - ./app/public:/app/public
       - ./app/prisma:/app/prisma 
       - /app/node_modules  # Monte dossier vide pour ignorer les node_modules du host
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    restart: always
    networks:
      - nginxpm
  
  # Set DB service with Postgres
  postgres:
    container_name: pokedex_postgres
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: pokedex
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: poke
    volumes: # Stores persistent database data in a Docker volume named postgres_data, so that data is not lost on each shutdown.
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    networks:
      - nginxpm
  
   # PGAdmin for web-based PostgreSQL interface
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: poke@admin.com
      PGADMIN_DEFAULT_PASSWORD: poke
    ports:
      - "5050:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin #Set persisting PG configureation
    restart: always
    networks:
      - nginxpm

# Define named volume (explicitly)
volumes:
  postgres_data:
    name: pokedex_postgres_data

# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
  nginxpm:
    external: true